#include <stdio.h>
#include <stdlib.h>

int isPagePresent(int page, int *frames, int frameSize) {
    for (int i = 0; i < frameSize; i++) {
        if (frames[i] == page) {
            return 1;
        }
    }
    return 0;
}

void updateLRU(int page, int *lru, int frameSize, int index) {
    for (int i = 0; i < frameSize; i++) {
        if (lru[i] < lru[index]) {
            lru[i]++;
        }
    }
    lru[index] = 0;
}

void displayFrames(int *frames, int frameSize) {
    for (int i = 0; i < frameSize; i++) {
        if (frames[i] == -1) {
            printf("Empty ");
        } else {
            printf("%d ", frames[i]);
        }
    }
    printf("\n");
}

int main() {
    int numFrames, numPages;

    printf("Enter the number of frames: ");
    scanf("%d", &numFrames);

    printf("Enter the number of pages: ");
    scanf("%d", &numPages);

    int *frames = (int *)malloc(numFrames * sizeof(int));
    int *lru = (int *)malloc(numFrames * sizeof(int));
    int *pages = (int *)malloc(numPages * sizeof(int));

    printf("Enter the pages: ");
    for (int i = 0; i < numPages; i++) {
        scanf("%d", &pages[i]);
    }

    for (int i = 0; i < numFrames; i++) {
        frames[i] = -1;
        lru[i] = 0;
    }

    int pageFaults = 0;

    printf("\nLRU Page Replacement Algorithm:\n");
    for (int i = 0; i < numPages; i++) {
        if (!isPagePresent(pages[i], frames, numFrames)) {
            int index = 0;
            for (int j = 1; j < numFrames; j++) {
                if (lru[j] > lru[index]) {
                    index = j;
                }
            }
            frames[index] = pages[i];
            updateLRU(pages[i], lru, numFrames, index);
            pageFaults++;
        } else {
            for (int j = 0; j < numFrames; j++) {
                if (frames[j] == pages[i]) {
                    updateLRU(pages[i], lru, numFrames, j);
                    break;
                }
            }
        }
        displayFrames(frames, numFrames);
    }
    printf("Total Page Faults (LRU): %d\n", pageFaults);

    free(frames);
    free(lru);
    free(pages);

    return 0;
}

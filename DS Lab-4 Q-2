#include <stdio.h>

// Structure to represent a sparse matrix element
struct SparseElement {
    int row, col, value;
};

// Function to display a sparse matrix
void displaySparseMatrix(struct SparseElement matrix[], int size) {
    printf("Row\tColumn\tValue\n");
    for (int i = 0; i < size; i++) {
        printf("%d\t%d\t%d\n", matrix[i].row, matrix[i].col, matrix[i].value);
    }
}

// Function to perform the fast transpose of a sparse matrix
void fastTranspose(struct SparseElement original[], int size, struct SparseElement transpose[]) {
    int rowSize = original[0].row;
    int colSize = original[0].col;
    int numTerms = original[0].value;

    // Initialize the transpose matrix
    transpose[0].row = colSize;
    transpose[0].col = rowSize;
    transpose[0].value = numTerms;

    if (numTerms > 0) {
        int colTerms[colSize];
        int startPos[colSize];

        // Initialize colTerms and startPost arrays
        for (int i = 0; i < colSize; i++) {
            colTerms[i] = 0;
        }

        // Calculate the number of non-zero elements in each column
        for (int i = 1; i <= numTerms; i++) {
            colTerms[original[i].col]++;
        }

        // Calculate the start position of each column in the transpose matrix
        startPos[0] = 1;
        for (int i = 1; i < colSize; i++) {
            startPos[i] = startPos[i - 1] + colTerms[i - 1];
        }

        // Perform the fast transpose operation
        for (int i = 1; i <= numTerms; i++) {
            int j = startPos[original[i].col]++;
            transpose[j].row = original[i].col;
            transpose[j].col = original[i].row;
            transpose[j].value = original[i].value;
        }
    }
}

int main() {
    // Example sparse matrix represented as an array of objects
    struct SparseElement original[] = {
        {3, 3, 5},
        {0, 2, 3},
        {1, 0, 1},
        {1, 3, 7},
        {2, 1, 2},
        {2, 2, 4}
    };

    int numTerms = sizeof(original) / sizeof(original[0]);

    // Display the original sparse matrix
    printf("Original Sparse Matrix:\n");
    displaySparseMatrix(original, numTerms);

    // Calculate the dimensions of the transpose matrix
    int transposeSize = numTerms + 1;
    struct SparseElement transpose[transposeSize];

    // Perform the fast transpose
    fastTranspose(original, numTerms, transpose);

    // Display the transposed sparse matrix
    printf("\nTransposed Sparse Matrix:\n");
    displaySparseMatrix(transpose, transposeSize);

    return 0;
}

#include <stdio.h>
#include <stdlib.h>

int isPagePresent(int page, int *frames, int frameSize) {
    for (int i = 0; i < frameSize; i++) {
        if (frames[i] == page) {
            return 1;
        }
    }
    return 0;
}

int findOptimalIndex(int *pages, int numPages, int *frames, int frameSize, int currentIndex) {
    int index = -1;
    int farthest = currentIndex;
    for (int i = 0; i < frameSize; i++) {
        int j;
        for (j = currentIndex + 1; j < numPages; j++) {
            if (frames[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    index = i;
                }
                break;
            }
        }
        if (j == numPages) {
            return i;
        }
    }
    return (index == -1) ? 0 : index;
}

void displayFrames(int *frames, int frameSize) {
    for (int i = 0; i < frameSize; i++) {
        if (frames[i] == -1) {
            printf("Empty ");
        } else {
            printf("%d ", frames[i]);
        }
    }
    printf("\n");
}

int main() {
    int numFrames, numPages;

    printf("Enter the number of frames: ");
    scanf("%d", &numFrames);

    printf("Enter the number of pages: ");
    scanf("%d", &numPages);

    int *frames = (int *)malloc(numFrames * sizeof(int));
    int *pages = (int *)malloc(numPages * sizeof(int));

    printf("Enter the pages: ");
    for (int i = 0; i < numPages; i++) {
        scanf("%d", &pages[i]);
    }

    for (int i = 0; i < numFrames; i++) {
        frames[i] = -1;
    }

    int pageFaultsFIFO = 0;
    int fifoIndex = 0;

    int pageFaultsOptimal = 0;

    printf("\nFIFO Page Replacement Algorithm:\n");
    for (int i = 0; i < numPages; i++) {
        if (!isPagePresent(pages[i], frames, numFrames)) {
            frames[fifoIndex] = pages[i];
            fifoIndex = (fifoIndex + 1) % numFrames;
            pageFaultsFIFO++;
        }
        displayFrames(frames, numFrames);
    }
    printf("Total Page Faults (FIFO): %d\n", pageFaultsFIFO);

    printf("\nOptimal Page Replacement Algorithm:\n");
    for (int i = 0; i < numPages; i++) {
        if (!isPagePresent(pages[i], frames, numFrames)) {
            int index = findOptimalIndex(pages, numPages, frames, numFrames, i);
            frames[index] = pages[i];
            pageFaultsOptimal++;
        }
        displayFrames(frames, numFrames);
    }
    printf("Total Page Faults (Optimal): %d\n", pageFaultsOptimal);

    free(frames);
    free(pages);

    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_SIZE 100

// Define a stack structure
struct Stack {
    int items[MAX_SIZE];
    int top;
};

// Function to initialize an empty stack
void initialize(struct Stack *s) {
    s->top = -1;
}

// Function to check if the stack is empty
int isEmpty(struct Stack *s) {
    return (s->top == -1);
}

// Function to push an element onto the stack
void push(struct Stack *s, int value) {
    if (s->top == MAX_SIZE - 1) {
        printf("Stack Overflow\n");
        exit(1);
    }
    s->items[++(s->top)] = value;
}

// Function to pop an element from the stack
int pop(struct Stack *s) {
    if (isEmpty(s)) {
        printf("Stack Underflow\n");
        exit(1);
    }
    return s->items[(s->top)--];
}

// Function to evaluate a postfix expression
int evaluatePostfix(char *postfix) {
    struct Stack operandStack;
    initialize(&operandStack);
    int i;

    for (i = 0; postfix[i]; i++) {
        char c = postfix[i];

        if (isdigit(c)) {
            push(&operandStack, c - '0'); // Convert character to integer
        } else if (c == '+' || c == '-' || c == '*' || c == '/') {
            int operand2 = pop(&operandStack);
            int operand1 = pop(&operandStack);
            int result;

            switch (c) {
                case '+':
                    result = operand1 + operand2;
                    break;
                case '-':
                    result = operand1 - operand2;
                    break;
                case '*':
                    result = operand1 * operand2;
                    break;
                case '/':
                    if (operand2 == 0) {
                        printf("Division by zero\n");
                        exit(1);
                    }
                    result = operand1 / operand2;
                    break;
            }

            push(&operandStack, result);
        }
    }

    if (!isEmpty(&operandStack) && operandStack.top == 0) {
        return operandStack.items[operandStack.top];
    } else {
        printf("Invalid postfix expression\n");
        exit(1);
    }
}

int main() {
    char postfix[MAX_SIZE];

    printf("Enter a postfix expression: ");
    fgets(postfix, MAX_SIZE, stdin);
    postfix[strlen(postfix) - 1] = '\0'; // Remove the newline character

    int result = evaluatePostfix(postfix);

    printf("Result: %d\n", result);

    return 0;
}

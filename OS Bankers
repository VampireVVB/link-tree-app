#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {
    int m, n;
    printf("Enter the number of processes(m): ");
    scanf("%d", &m);
    printf("Enter the number of resources(n): ");
    scanf("%d", &n);

    // Declare matrices and vectors
    int allocation[m][n], max[m][n], need[m][n], available[n];

    // Input Max matrix
    printf("Enter the Max matrix:\n");
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    // Input Allocation matrix and calculate Need matrix
    printf("Enter the Allocation matrix:\n");
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &allocation[i][j]);
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }

    // Input available vector
    printf("Enter the available vector:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &available[i]);
    }

    // Apply Safety Algorithm (Banker's Algorithm)
    int work[n];
    memcpy(work, available, sizeof(work));
    int finish[m];
    memset(finish, 0, sizeof(finish)); // Initialize finish array to 0
    int safestate[m];
    int ind = 0;

    // Iterate over each process
    for (int i = 0; i < m; i++) {
        if (!finish[i]) {
            int success = 1;
            // Check if resources are available for the current process
            for (int j = 0; j < n; j++) {
                if (need[i][j] > work[j]) {
                    success = 0;
                    break;
                }
            }
            // If resources are available, allocate them
            if (success) {
                safestate[ind++] = i;
                for (int k = 0; k < n; k++) {
                    work[k] += allocation[i][k];
                }
                finish[i] = 1; // Mark process as finished
                i = -1; // Start again from the beginning to check if more processes can be executed
            }
        }
    }

    // Check if all processes were successfully executed
    int deadlock = 0;
    for (int i = 0; i < m; i++) {
        if (!finish[i]) {
            deadlock = 1; // If any process is not finished, deadlock occurs
            break;
        }
    }

    // Output the safestate or indicate deadlock
    if (!deadlock) {
        printf("Safe state sequence: ");
        for (int i = 0; i < ind; i++) {
            printf("%d ", safestate[i]);
        }
        printf("\n");
    } else {
        printf("Deadlock detected!\n");
    }

    return 0;
}
